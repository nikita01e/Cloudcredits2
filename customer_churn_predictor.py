# -*- coding: utf-8 -*-
"""Customer Churn Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JXYHA-xWuZQ-NptvjQerpY0ZvVOA2mma
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

churn_df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/churn_data.csv')
churn_df.head()

customer_df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/customer_data.csv')
customer_df.head()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

internet_df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/internet_data.csv')
internet_df.head()

churn_df.isnull().sum()

customer_df.isnull().sum()

internet_df.isnull().sum()

merge=pd.merge(churn_df,customer_df,how='inner',on='customerID')

df=pd.merge(merge,internet_df,how='inner',on='customerID')
df.head()

df.columns

df.shape

df.describe()

df.info()

sns.countplot(x=df['Churn'])

plt.figure(figsize=(5, 5))
plt.pie(df['Churn'].value_counts(), labels=["No", "Yes"], autopct='%1.1f%%', startangle=90, colors=['#ff9999', '#66b3ff'])
plt.title('Churn Distribution')
plt.axis('equal')
plt.show()

plt.figure(figsize=(6, 4))
sns.barplot(x='Churn', y='tenure', data=df)
plt.title('Churn vs Tenure')
plt.xlabel('Churn')
plt.ylabel('Tenure (Months)')
plt.show()

plt.figure(figsize=(6, 4))
sns.barplot(x='Churn', y='MonthlyCharges', data=df, palette="Set1")
plt.title('Churn vs Monthly Charges')
plt.xlabel('Churn')
plt.ylabel('Monthly Charges ($)')
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(x='Contract', hue='Churn', data=df, palette="Set2")
plt.title('Churn vs Contract Type')
plt.xlabel('Contract Type')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(6, 4))
sns.countplot(x='gender', hue='Churn', data=df, palette="Set2")
plt.title('Churn vs Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(6, 4))
sns.histplot(df[df['Churn'] == 'Yes']['TotalCharges'], kde=True, color='red', label='Churned', stat='density', bins=30)
sns.histplot(df[df['Churn'] == 'No']['TotalCharges'], kde=True, color='blue', label='Not Churned', stat='density', bins=30)
plt.title('Churn vs Total Charges')
plt.xlabel('Total Charges')
plt.ylabel('Density')
plt.legend()
plt.show()

numeric_df = df.select_dtypes(include=np.number)
correlation_matrix = numeric_df.corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(8, 6))
sns.lineplot(x='tenure', y='Churn', data=df, ci=None, marker="o", color='purple')
plt.title('Churn Over Time (Tenure)')
plt.xlabel('Tenure (Months)')
plt.ylabel('Churn Rate')
plt.show()

x=df.drop(['Churn','customerID'],axis=1)
y=df['Churn']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)

x_train.shape

x_test.shape

numeric_x_train = x_train.select_dtypes(include=np.number)

scalar=StandardScaler()
scalar.fit(numeric_x_train)
x_train_scaled = scalar.transform(x_train.select_dtypes(include=np.number))
x_test_scaled = scalar.transform(x_test.select_dtypes(include=np.number))

x_train['TotalCharges'] = pd.to_numeric(x_train['TotalCharges'], errors='coerce')
x_test['TotalCharges'] = pd.to_numeric(x_test['TotalCharges'], errors='coerce')

categorical_cols = x_train.select_dtypes(include='object').columns

label_encoders = {}
for col in categorical_cols:
    label_encoders[col] = LabelEncoder()

    x_train[col] = label_encoders[col].fit_transform(x_train[col])

    x_test[col] = label_encoders[col].transform(x_test[col])

label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

x_train = x_train.fillna(x_train.mean())
x_test = x_test.fillna(x_test.mean())

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(x_train, y_train_encoded)

y_pred_rf = rf_model.predict(x_test)

accuracy = accuracy_score(y_test_encoded, y_pred_rf)
print(f'Accuracy:{accuracy}')

cm=confusion_matrix(y_test_encoded,y_pred_rf)
print(cm)

print(classification_report(y_test_encoded, y_pred_rf))

